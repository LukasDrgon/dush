{"version":3,"file":"dush.umd.js","sources":["../src/index.js"],"sourcesContent":["/*!\n * dush <https://github.com/tunnckoCore/dush>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\n'use strict'\n\n/**\n * > A constructor function that returns an object\n * with a few methods.\n *\n * See [JSBin Example](http://jsbin.com/mepemeluhi/edit?js,console).\n *\n * **Example**\n *\n * ```js\n * const dush = require('dush')\n * const emitter = dush()\n *\n * console.log(emitter.all) // => {}\n * console.log(emitter.on) // => Function\n * console.log(emitter.once) // => Function\n * console.log(emitter.off) // => Function\n * console.log(emitter.emit) // => Function\n * ```\n *\n * @name   dush()\n * @return {Object} methods\n * @api public\n */\n\nexport default function dush () {\n  const all = Object.create(null)\n  const app = {\n    /**\n     * > An listeners map of all registered events\n     * and their listeners. A key/value store, where 1) value\n     * is an array of event listeners for the key and 2) key\n     * is the name of the event.\n     *\n     * See [JSBin Example](http://jsbin.com/zuwayalovi/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter.on('foo', () => {})\n     * emitter.on('foo', () => {})\n     * emitter.on('bar', () => {})\n     *\n     * console.log(emitter.all)\n     * // => { foo: [Function, Function], bar: [Functon] }\n     * ```\n     *\n     * @name  .all\n     * @type {Object} `all` a key/value store of all events and their listeners\n     * @api public\n     */\n\n    all,\n\n    /**\n     * > Invokes `plugin` function immediately, which is passed\n     * with `app` instance. You can use it for adding more methods\n     * or properties to the instance. Useful if you want to make\n     * dush to work with DOM for example.\n     *\n     * ```js\n     * const app = dush()\n     *\n     * app.on('hi', (str) => {\n     *   console.log(str) // => 'Hello World!!'\n     * })\n     *\n     * app.use((app) => {\n     *   app.foo = 'bar'\n     *   app.hello = (place) => app.emit('hi', `Hello ${place}!!`)\n     * })\n     *\n     * console.log(app.foo) // => 'bar'\n     * app.hello('World')\n     * ```\n     *\n     * @name   .use\n     * @param  {Function} `plugin` A function passed with `(app)` signature\n     * @return {Object} The `dush` instance for chaining\n     * @api public\n     */\n\n    use (plugin) {\n      plugin(app)\n      return app\n    },\n\n    /**\n     * > Add `handler` for `name` event.\n     *\n     * See [JSBin Example](http://jsbin.com/xeketuruto/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter\n     *   .on('hi', (place) => {\n     *     console.log(`hello ${place}!`) // => 'hello world!'\n     *   })\n     *   .on('hi', (place) => {\n     *     console.log(`hi ${place}, yeah!`) // => 'hi world, yeah!'\n     *   })\n     *\n     * emitter.emit('hi', 'world')\n     * ```\n     *\n     * @name   .on\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @return {Object} The `dush` instance for chaining\n     * @api public\n     */\n\n    on (name, handler) {\n      let e = all[name] || (all[name] = [])\n      e.push(handler)\n\n      return app\n    },\n\n    /**\n     * > Add `handler` for `name` event that\n     * will be called only one time.\n     *\n     * See [JSBin Example](http://jsbin.com/teculorima/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     * let called = 0\n     *\n     * emitter.once('foo', () => {\n     *   console.log('called only once')\n     *   called++\n     * })\n     *\n     * emitter\n     *   .emit('foo', 111)\n     *   .emit('foo', 222)\n     *   .emit('foo', 333)\n     *\n     * console.log(called) // => 1\n     * ```\n     *\n     * @name   .once\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @return {Object} The `dush` instance for chaining\n     * @api public\n     */\n\n    once (name, handler) {\n      function fn (a, b, c) {\n        app.off(name, fn)\n        handler(a, b, c)\n      }\n\n      return app.on(name, fn)\n    },\n\n    /**\n     * > Remove `handler` for `name` event. If `handler` not\n     * passed will remove **all** listeners for that `name` event.\n     *\n     * See [JSBin Example](http://jsbin.com/nujucoquvi/3/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * const handler = () => {\n     *   console.log('not called')\n     * }\n     *\n     * emitter.on('foo', handler)\n     * emitter.off('foo', handler)\n     *\n     * emitter.on('foo', (abc) => {\n     *   console.log('called', abc) // => 'called 123'\n     * })\n     * emitter.emit('foo', 123)\n     *\n     * // or removing all listeners of `foo`\n     * emitter.off('foo')\n     * emitter.emit('foo')\n     * ```\n     *\n     * @name   .off\n     * @param  {String} `name` Type of event to listen for, or `'*'` for all events\n     * @param  {Function} `handler` Function to call in response to given event\n     * @return {Object} The `dush` instance for chaining\n     * @api public\n     */\n\n    off (name, handler) {\n      if (handler && all[name]) {\n        all[name].splice(all[name].indexOf(handler) >>> 0, 1)\n      } else {\n        all[name] = []\n      }\n\n      return app\n    },\n\n    /**\n     * > Invoke all handlers for given `name` event.\n     * If present, `'*'` listeners are invoked too with `(type, ...rest)` signature,\n     * where the `type` argument is a string representing the name of the\n     * called event; and all of the rest arguments.\n     *\n     * See [JSBin Example](http://jsbin.com/muqujavolu/edit?js,console).\n     *\n     * **Example**\n     *\n     * ```js\n     * const emitter = dush()\n     *\n     * emitter.on('foo', (a, b, c) => {\n     *   console.log(`${a}, ${b}, ${c}`) // => 1, 2, 3\n     * })\n     *\n     * emitter.on('*', (name, a, b, c) => {\n     *   console.log(`name is: ${name}`)\n     *   console.log(`rest args are: ${a}, ${b}, ${c}`)\n     * })\n     *\n     * emitter.emit('foo', 1, 2, 3)\n     * emitter.emit('bar', 555)\n     * ```\n     *\n     * @name   .emit\n     * @param  {String} `name` The name of the event to invoke\n     * @param  {any} `args` Maximum 3 arguments of any type of value, passed to each listener\n     * @return {Object} The `dush` instance for chaining\n     * @api public\n     */\n\n    emit (name, a, b, c) {\n      if (name !== '*') {\n        (all[name] || []).map((handler) => { handler(a, b, c) });\n        (all['*'] || []).map((handler) => { handler(name, a, b, c) })\n      }\n\n      return app\n    }\n  }\n\n  return app\n}\n"],"names":["dush","const","all","Object","create","app","use","plugin","on","name","handler","push","once","fn","a","b","c","off","splice","indexOf","emit","map"],"mappings":"mKAiCA,QAAwBA,KACtBC,GAAMC,GAAMC,OAAOC,OAAO,MACpBC,GA2BJH,IAAAA,EA8BAI,aAAKC,GAEH,MADAA,GAAOF,GACAA,GA+BTG,YAAIC,EAAMC,GAIR,OAHQR,EAAIO,KAAUP,EAAIO,QACxBE,KAAKD,GAEAL,GAmCTO,cAAMH,EAAMC,GACV,QAASG,GAAIC,EAAGC,EAAGC,GACjBX,EAAIY,IAAIR,EAAMI,GACdH,EAAQI,EAAGC,EAAGC,GAGhB,MAAOX,GAAIG,GAAGC,EAAMI,IAsCtBI,aAAKR,EAAMC,GAOT,MANIA,IAAWR,EAAIO,GACjBP,EAAIO,GAAMS,OAAOhB,EAAIO,GAAMU,QAAQT,KAAa,EAAG,GAEnDR,EAAIO,MAGCJ,GAoCTe,cAAMX,EAAMK,EAAGC,EAAGC,GAMhB,MALa,MAATP,KACDP,EAAIO,QAAaY,IAAI,SAACX,GAAcA,EAAQI,EAAGC,EAAGC,MAClDd,EAAI,UAAYmB,IAAI,SAACX,GAAcA,EAAQD,EAAMK,EAAGC,EAAGC,MAGnDX,GAIX,OAAOA"}